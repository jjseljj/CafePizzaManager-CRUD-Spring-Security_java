В данном проекте реализован функционал для управления информацией о кафе и пиццериях. В приложении есть две основные сущности: "Пицца" и "Кафе". Каждая пицца описывается именем, описанием, ценой и списком ингредиентов. Каждое кафе описывается именем, адресом и списком доступных пицц.

Для хранения данных используется база данных, для работы с которой используется слой репозитория. Классы репозитория (PizzaRepository и CafeRepository) предоставляют методы для сохранения, удаления и получения объектов пиццы и кафе соответственно.

Для реализации бизнес-логики используется слой сервиса. Классы сервиса (PizzaService и CafeService) содержат методы для создания, обновления и удаления объектов пиццы и кафе, а также методы для получения информации об объектах.

Для обеспечения безопасности веб-приложения используется Spring Security. Конфигурация безопасности находится в классе SecurityConfiguration. В этом классе определены правила доступа к различным ресурсам, а также конфигурация аутентификации и авторизации пользователей.

Кроме того, в проекте есть классы PizzaController и CafeController, которые предоставляют API для получения информации о пиццах и кафе, а также для создания, обновления и удаления объектов пиццы и кафе.


В данном проекте реализован функционал для управления информацией о кафе и пиццериях. Система предоставляет функционал создания, чтения, обновления и удаления (CRUD) записей для обеих сущностей, а также обеспечивает безопасность с помощью авторизации администратора с именем "admin".

Для сущности "Pizza" администратор может создавать новые записи, указывая информацию, такую как название пиццы, размер, основные ингредиенты и id кафе, в котором ее можно заказать. Администратор также может просматривать, обновлять и удалять существующие записи.

Для сущности "Cafe" администратор может создавать новые записи, указывая информацию, такую как название кафе, город, адрес, e-mail, телефон, время открытия и закрытия. Администратор также может просматривать, обновлять и удалять существующие записи.

Авторизация администратора и ограничение доступа к функционалу CRUD, а также запросам POST, DELETE и PUT реализуются с помощью Spring Security. Пользователь сможет получить все пиццы, конкретную пиццу, все кафе, конкретное кафе и т.д.

Сущность "Cafe" и "Pizza" имеют двустороннюю связь @OneToMany, что означает, что у каждого кафе может быть множество пицц, но каждая пицца может принадлежать только одному кафе.


Приложение обеспечивает возможность создания, чтения, обновления и удаления записей (CRUD) для пиццерий и пицц. Для обеспечения безопасности функционала CRUD и запросов POST, DELETE и PUT, требуется имя пользователя "admin". В приложении имеется возможность получения всех записей о пиццах и кафе, а также выборочного получения записи.

Каждая пицца относится к одной пиццерии, и каждая пиццерия может иметь несколько видов пицц. Связь между кафе и пиццами реализована с помощью аннотации bidirectional @OneToMany.

Для кафе в классе Cafes определены следующие поля:

    id - уникальный идентификатор кафе;
    name - название кафе;
    city - город, в котором находится кафе;
    address - адрес кафе;
    email - электронный адрес кафе;
    phone - телефон кафе;
    openAt - время открытия кафе;
    closeAt - время закрытия кафе.

В классе Pizzas определены следующие поля:

    id - уникальный идентификатор пиццы;
    name - название пиццы;
    description - описание пиццы;
    price - цена пиццы;
    isVegetarian - флаг, указывающий, является ли пицца вегетарианской;
    isGlutenFree - флаг, указывающий, является ли пицца безглютеновой;
    imageUrl - URL-адрес изображения пиццы.

Связь между кафе и пиццами реализована с помощью аннотации @OneToMany в классе Cafes. Каждая пицца может принадлежать только одной пиццерии. Связь реализована в поле pizzas класса Cafes, которое хранит множество пицц, принадлежащих данной пиццерии. При удалении кафе все связанные с ним записи о пиццах также удаляются.

Для обеспечения безопасности приложения используется Spring Security, который проверяет учетные данные пользователя и ограничивает доступ к определенным частям приложения в зависимости от его роли.

CafesController - Этот код - это Java-класс, который является контроллером для веб-приложения. Он предназначен для обработки запросов от клиента и вызова соответствующих методов для обработки этих запросов. Контроллер включает несколько методов для обработки разных запросов HTTP, таких как GET, POST, PUT и DELETE.

                  Каждый метод имеет свой адрес веб-запроса, например, метод getAllCafes() обрабатывает запрос GET по адресу /cafes. Методы также могут принимать параметры запроса, передаваемые в виде аргументов метода, например, метод getCafeByIdWithPizzas() принимает идентификатор кафе в качестве параметра пути.

                  Контроллер использует Spring Framework для инверсии управления и управления зависимостями. Он также использует Spring Security для проверки авторизации пользователей и разграничения доступа к методам контроллера в зависимости от роли пользователя.

                  Контроллер также связан с репозиторием, который обрабатывает запросы к базе данных. В этом коде приведены методы для работы с таблицами "Cafes" и "Pizzas".

                  Наконец, контроллер также включает обработчик исключений, который перехватывает ошибки валидации и возвращает сообщения об ошибках в качестве ответа на запрос.

Данный код написан на языке Java и представляет собой реализацию REST-контроллера для управления кафе. Он использует Spring Framework и включает следующие методы:

    getAllCafes() - возвращает список всех кафе
    addCafe() - добавляет новое кафе в систему
    getCafeByIdWithPizzas() - возвращает информацию о кафе по заданному идентификатору и список всех пицц в кафе
    updateCafeById() - обновляет информацию о кафе по заданному идентификатору
    deleteCafeById() - удаляет кафе по заданному идентификатору
    getCafesByAddress() - осуществляет поиск кафе по заданному адресу
    addCafes() - добавляет новое кафе в систему
    handleValidationExceptions() - обрабатывает ошибки валидации при добавлении нового кафе.

Класс PizzasController является контроллером Spring для управления пиццами. Он содержит ряд методов для взаимодействия с базой данных и предоставления информации о пиццах в формате JSON.

Методы класса:

    getPizzasByCafeId: метод для получения списка всех пицц из определенного кафе. Параметром метода является cafe_id. Он использует метод findByCafeId интерфейса PizzasRepository для поиска всех пицц из кафе с указанным cafe_id.
    addPizzaToCafe: метод для добавления новой пиццы в определенное кафе. Параметром метода является объект Pizzas, содержащий информацию о пицце, которую необходимо добавить. Он использует метод save интерфейса PizzasRepository для сохранения новой пиццы в базе данных.
    getPizzaById: метод для получения информации о конкретной пицце по ее идентификатору. Параметром метода является id пиццы. Он использует метод findById интерфейса PizzasRepository для поиска пиццы с указанным id.
    updatePizzaById: метод для обновления информации о конкретной пицце по ее идентификатору. Параметрами метода являются id пиццы и объект Pizzas, содержащий новую информацию о пицце. Он использует метод findById интерфейса PizzasRepository для поиска пиццы с указанным id, а затем обновляет ее поля новыми значениями, используя методы setName, setDescription, setPrice, setIsVegetarian, setIsGlutenFree и setImageUrl. После этого он сохраняет измененную пиццу в базе данных с помощью метода save.
    deletePizza: метод для удаления конкретной пиццы по ее идентификатору. Параметром метода является id пиццы. Он использует метод deleteById интерфейса PizzasRepository для удаления пиццы с указанным id.
    getAllPizzas: метод для получения списка всех пицц из базы данных. Он использует метод findAll интерфейса PizzasRepository для поиска всех пицц в базе данных.
    searchPizzasByName: метод для выполнения базового поиска по имени пиццы. Параметром метода является name, который должен содержать часть имени пиццы. Он использует метод findByNameContainingIgnoreCase интерфейса PizzasRepository для поиска всех пицц.

@GetMapping("/pizzas"): метод getPizzasByCafeId возвращает список всех пицц, которые находятся в определенном кафе. К этому методу можно обратиться по адресу http://localhost:8080/pizzas?cafe_id=1, указав ID кафе в запросе. Если список пицц пуст, то метод возвращает HttpStatus.NOT_FOUND, иначе возвращает HttpStatus.OK вместе с списком пицц.

@PostMapping("/pizzas"): метод addPizzaToCafe добавляет новую пиццу в определенное кафе. Метод принимает объект Pizzas в теле запроса и сохраняет его в репозитории. Если операция прошла успешно, метод возвращает HttpStatus.CREATED вместе с объектом Pizzas.

@GetMapping("/pizza/{id}"): метод getPizzaById возвращает детали определенной пиццы. К этому методу можно обратиться по адресу http://localhost:8080/pizza/1, указав ID пиццы в запросе. Если пицца не найдена, метод возвращает HttpStatus.NOT_FOUND, иначе возвращает HttpStatus.OK вместе с объектом Pizzas.

@PutMapping("/pizza/{id}"): метод updatePizzaById обновляет детали определенной пиццы. Метод принимает ID пиццы и объект Pizzas в теле запроса. Если пицца не найдена, метод возвращает HttpStatus.NOT_FOUND, иначе обновляет детали пиццы и возвращает HttpStatus.OK вместе с объектом Pizzas.

@DeleteMapping("/pizza/{id}"): метод deletePizza удаляет определенную пиццу. Метод принимает ID пиццы и удаляет его из репозитория. Если операция прошла успешно, метод возвращает HttpStatus.NO_CONTENT, иначе возвращает HttpStatus.INTERNAL_SERVER_ERROR.

@GetMapping("/pizzas/all"): метод getAllPizzas возвращает список всех пицц из базы данных. Если список пицц пуст, метод возвращает HttpStatus.NOT_FOUND, иначе возвращает HttpStatus.OK вместе с списком пицц.

@GetMapping("/pizzas/search"): метод searchPizzasByName выполняет поиск пицц по названию. Метод принимает строку name в качестве параметра запроса и возвращает список всех пицц, чье название содержит заданную строку. Если список пицц пуст, метод возвращает HttpStatus.NOT_FOUND, иначе возвращает HttpStatus.OK вместе с списком пицц.

@PostMapping("/pizzas/addPizzas"): метод addPizzas добавляет новую пиццу в базу данных. Метод принимает объект Pizzas в теле запроса и сохраняет его в репозитории

Метод addPizzas является обработчиком POST-запроса, который добавляет новую пиццу в базу данных. Метод принимает объект Pizzas, который содержит информацию о новой пицце. Если объект Pizzas проходит проверку на валидность, то метод сохраняет новую пиццу в базу данных и возвращает сообщение об успешном сохранении. Если объект Pizzas не проходит проверку на валидность, то метод возвращает сообщение об ошибке в формате Map<String, String>.

Метод handleValidationExceptions является обработчиком ошибок, который обрабатывает исключения типа MethodArgumentNotValidException. Данный метод перехватывает исключение и возвращает сообщение об ошибке в формате Map<String, String>, содержащее информацию о том, какое поле объекта Pizzas не прошло проверку на валидность и по какой причине.


Класс User представляет собой модель пользователя и содержит следующие поля:

    id: уникальный идентификатор пользователя типа Long.
    username: имя пользователя типа String.
    password: пароль пользователя типа String.
    role: роль пользователя типа String.

Также класс имеет конструктор, который принимает имя пользователя, пароль и роль в качестве аргументов.

Класс SecurityConfiguration представляет собой конфигурацию безопасности и содержит следующие методы:

    getEncoder(): метод, возвращающий NoOpPasswordEncoder для шифрования паролей.
    getChain(): метод, возвращающий цепочку фильтров безопасности для HttpSecurity. В этом методе производится настройка прав доступа, аутентификации, авторизации и других параметров.


Интерфейс CafesRepository расширяет JpaRepository для класса Cafes и содержит следующие методы:

    findByName(String name) - возвращает кафе с указанным именем.
    findByCity(String city) - возвращает список кафе, расположенных в указанном городе.
    findByAddress(String address) - возвращает список кафе, расположенных по указанному адресу.
    findByPhone(String phone) - возвращает список кафе, с указанным телефоном.
    findByEmail(String email) - возвращает список кафе, с указанным email.
    findByOpenAt(String openAt) - возвращает список кафе, открытых в указанное время.
    findByCloseAt(String closeAt) - возвращает список кафе, закрытых в указанное время.
    findByAddressContainingIgnoreCase(String address) - возвращает список кафе, адрес которых содержит указанную строку (без учета регистра).
    findByIdWithPizzas(Long id) - возвращает кафе с указанным id и списком пицц, которые можно заказать в этом кафе.
    findAllWithPizzas() - возвращает список всех кафе с пиццами.

Интерфейс PizzasRepository также расширяет JpaRepository для класса Pizzas и содержит следующие методы:

    findByName(String name) - возвращает пиццу с указанным именем.
    findByPrice(Double price) - возвращает пиццу с указанной ценой.
    findByNameContaining(String name) - возвращает список пицц, чьи имена содержат указанную строку.
    findByNameContainingIgnoreCase(String name) - возвращает список пицц, чьи имена содержат указанную строку (без учета регистра).
    findByCafeId(@Param("cafeId") Long cafeId) - возвращает список пицц, которые можно заказать в кафе с указанным id.


